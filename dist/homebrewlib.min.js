(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.homebrewlib = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var constants = require('./constants.js');
var conv      = require('./conversions.js');

// calculates the fermentation attenuation from Plato readings
get_attenuation = function (oplato, fplato) {
  if (oplato != 0)
    return 100 - fplato/oplato*100;
  return 0;
}

// calculates the IBUs for one hop addition according to Tinseth
// source: http://realbeer.com/hops/research.html
// example: hop addition with 5.0% AA, 50g, 60mins, 60l, 1.035 SG >> 31 IBUs
get_IBU = function (aa, weight, minutes, volume, sg, type, after_hot_break) {

  var alpha_acids = aa/100 * weight * 1000 / volume;
  var bigness_factor = 1.65 * Math.pow( 0.000125, sg-1 );
  var boil_time_factor = (1 - Math.exp(-0.04 * minutes))/4.15;
  var utilization = bigness_factor * boil_time_factor;
  var increment = 1;
  if (type === 'Pellet') increment += 0.1;
  if (after_hot_break) increment += 0.1
  return alpha_acids * utilization * increment;
}


// dilutes wort with water
add_water = function (wort, water_addition) {

  var dilution_factor = wort.vol / (wort.vol + water_addition);

  wort.og = 1 + (wort.og - 1) * dilution_factor;
  wort.fg = 1 + (wort.fg - 1) * dilution_factor;
  wort.abv *= dilution_factor;
  wort.ebc *= dilution_factor;
  wort.ibu *= dilution_factor;
  wort.co2 *= dilution_factor;
  wort.vol += water_addition;
}


add_sugar = function (wort, quantity, type) {

  var correction = 1.0; // correction compared to spure ucrose
  switch (type) {
    case 'Dextrose'            : correction = 1.0; /// TBD !!!!
    case 'Dry malt extract'    : correction = 1.0;
    case 'Liquid malt extract' : correction = 1.0;
  }

  var new_sugar = quantity * correction;
  var total_sugar = wort.vol * wort.og * sg2p(wort.og)/100 + new_sugar;

  var a = 258.6;
  var b = 227.1/258.2;
  var extract_plato = ( -(a+b*total_sugar*100/wort.vol) +
                      Math.sqrt(Math.pow(a+b*total_sugar*100/wort.vol,2) +
                      4*a*(1-b)*total_sugar*100/wort.vol)) / (2-2*b);
  var sg = p2sg(extract_plato);

  wort.og  = sg;
  wort.fg  = wort.fg;  // tbd
  wort.abv = wort.abv; // tbd
  wort.ebc = wort.ebc; // tbd
  wort.ibu = wort.ibu;
  wort.co2 = wort.co2;
  wort.vol = wort.vol;
}



// calculates the properties of the wort in the mash tun, before lautering
// source: https://byo.com/hops/item/761-hitting-target-original-gravity-and-volume-advanced-homebrewing
mash = function (inflow, params, outflow) {

  var ebc = 0;
  var total_grain_weigth = 0;
  for (var i = 0; i < params.malts.length; i++) {
    total_grain_weigth += params.malts[i].weight;
    ebc += params.malts[i].ebc * params.malts[i].weight;
  }
  ebc = ebc / total_grain_weigth + inflow.plan.ebc + constants.color_adjustment;
  if (isNaN(ebc)) ebc = 0;

  var extract = total_grain_weigth * params.mash_efficiency_weight;

  var volume = params.mash_water + params.sparge_water - total_grain_weigth * constants.grain_absorption;

  var a = 258.6;
  var b = 227.1/258.2;
  var eff = params.mash_efficiency_weight*100;
  var extract_plato = ( -(a+b*eff*total_grain_weigth/volume) +
                      Math.sqrt(Math.pow(a+b*eff*total_grain_weigth/volume,2) +
                      4*a*(1-b)*eff*total_grain_weigth/volume)) / (2-2*b);
  var sg = conv.p2sg(extract_plato);

  outflow.plan = {
    vol  : volume - params.mash_loss,
    og   : sg,
    fg   : sg,
    abv  : inflow.plan.abv,
    ebc  : ebc,
    ibu  : inflow.plan.ibu,
    co2  : inflow.plan.co2
  };
};


// boil wort
// supported ingredients: hops, water additions
boil = function (inflow, params, outflow) {

  // todo: calculare boil-off using boiling power not %
  // change of volume due to evaporation
  var post_boil_volume = inflow.plan.vol - params.boil_evaporation_rate * params.time/60;

  // specific gravity at end of boil
  var sg = 1 + (inflow.plan.og - 1) * inflow.plan.vol/post_boil_volume;

  // IBUs at end of boil
  var ibu = inflow.plan.ibu;
  for (i=0; i<params.hops.length; i++)
    ibu += get_IBU (params.hops[i].aa, params.hops[i].weight, params.hops[i].time, post_boil_volume,
            (inflow.plan.og + sg)/2.0, params.hops[i].type, params.hops[i].after_hot_break);
//              for (let hop of boil.hops)
//              ibu += get_IBU (hop.aa, hop.weight, hop.time, post_boil_volume,
  //                    (wort.og + sg)/2.0, hop.type, hop.after_hot_break);

  outflow.plan = {
    vol  : post_boil_volume - params.boil_loss,
    og   : sg,
    fg   : sg,
    abv  : inflow.plan.abv,
    ebc  : inflow.plan.ebc,
    ibu  : ibu,
    co2  : inflow.plan.co2
  };

  // water addition during boil
  if (params.water_addition)
    add_water(outflow.plan, params.water_addition);

  // sugar addition during boil
  if (params.sugar_addition.qty)
    add_sugar(outflow.plan, params.sugar_addition.qty, params.sugar_addition.type);
};



ferment = function (inflow, params, outflow) {

  var original_extract = conv.sg2p(inflow.plan.og);
  var final_extract = original_extract;
  if (params.yeast.attenuation)
    final_extract -= original_extract * params.yeast.attenuation/100;
  var fg = conv.p2sg(final_extract);

  var co2 = 1.013 * Math.pow(2.71828182845904, -10.73797+2617.25/(params.temperature+273.15)) * 10;

  // source: http://www.cotubrewing.com/homebrewing/alcohol-content-formula/
  var abv = (1.05/0.79) * ((inflow.plan.og - fg) / fg) * 100;
  if (abv < 0) abv = 0;

  outflow.plan = {
    vol  : inflow.plan.vol - params.fermentation_loss,
    og   : inflow.plan.og,
    fg   : fg,
    abv  : inflow.plan.abv + abv,
    ebc  : inflow.plan.ebc,
    ibu  : inflow.plan.ibu,
    co2  : co2
  };

  // take into account possible water addition during fermentation
  if (params.water_addition)
    add_water(outflow.plan, params.ferment.water_addition);

  // sugar addition during fermentation
  if (params.sugar_addition.qty)
    add_sugar(outflow.plan, params.sugar_addition.qty, para.sugar_addition.type);
};


bottle = function (inflow, params, outflow) {

  var prime_co2 = 0;
  if (params.prime) {
    for (var i = 0; i < params.prime.length; i++) {
      if (params.prime[i].type == "Sucrose")
        prime_co2 += params.prime[i].qty * constants.sucrose_to_CO2_conversion;
      if (params.prime[i].type == "Dextrose")
        prime_co2 += params.prime[i].qty * constants.dextrose_to_CO2_conversion;
      if (params.prime[i].type == "Extract")
        prime_co2 += params.prime[i].qty * constants.extract_to_CO2_conversion;
      if (params.prime[i].type == "Speise")
        prime_co2 += 0.5 * params.prime[i].qty * inflow.plan.og * sg2p(inflow.plan.og)*10 *
                     0.82 * (100 - 100*sg2p(inflow.plan.fg)/sg2p(inflow.plan.og)) /
                     (inflow.plan.vol + params.prime[i].qty) / inflow.plan.vol;
                     // to be fixed: does not yer subtract needed volume from wort volume!
    }

  }
  // todo: add volume of possible priming solutions

/////// WRONG FORMULA!!
  var prime_abv = (prime_co2 * 51/49) / inflow.plan.vol / 0.794 / 10;

  outflow.plan = {
    vol : inflow.plan.vol,
    og  : inflow.plan.og,
    fg  : inflow.plan.fg,
    abv : inflow.plan.abv + prime_abv,
    ebc : inflow.plan.ebc,
    ibu : inflow.plan.ibu,
    co2 : inflow.plan.co2 + prime_co2
  };
};


module.exports = {
  mash    : mash,
  boil    : boil,
  ferment : ferment,
  bottle  : bottle
};

},{"./constants.js":2,"./conversions.js":3}],2:[function(require,module,exports){
module.exports = {

  // Amount of water (liters) absorbed by 1 kg of grain (average, emprical value)
  // Source: https://byo.com/bock/item/410-calculating-water-usage-advanced-brewing
  grain_absorption : 1.04,

  // Volume in l occupied by 1 kg of grains
  // Source: https://byo.com/bock/item/410-calculating-water-usage-advanced-brewing
  grain_volume : 0.67,

  // CO2 produced by fermenting sugar (percentage of weight)
  // source: http://braukaiser.com/wiki/index.php?title=Accurately_Calculating_Sugar_Additions_for_Carbonation
  sucrose_to_CO2_conversion  : 0.51,
  dextrose_to_CO2_conversion : 0.51 * 0.91,
  extract_to_CO2_conversion  : 0.51 * 0.82 * 0.80,

  // Color adjustment in EBC during wort production
  // source:
  color_adjustment : 3

};

},{}],3:[function(require,module,exports){
module.exports = {

  // temperature from Celsius to Fahrenheit
  // example: 0˚C >> 32F
  c2f : function (temp) {
    return temp * 9/5 + 32;
  },

  // temperature from Fahrenheit to Celsius
  // example: 32F >> 0˚C
  f2c : function (temp) {
    return (temp - 32) * 5/9;
  },

  // volume from gallons to liters
  // example: 5 gal >> 7,57 l
  gal2l : function (vol) {
    return vol * 3.78541;
  },

  // volume from liters to gallons
  // example: 10 l >> 2,64 gal
  l2gal : function (vol) {
    return vol / 3.78541;
  },

  // ounces to grams
  // example: 1 oz >> 28.35 g
  oz2g : function (qty) {
    return qty * 28.3495;
  },

  // grams to ounces
  // example: 50 g >> 1.76 oz
  g2oz : function (qty) {
    return qty / 28.3495;
  },

  // pound to kg
  // example: 5 lbs >> 2.27 kg
  lbs2kg : function (qty) {
    return qty * 0.453592;
  },

  // kg to pound
  // example: 10 kg >> 22.05 lbs
  kg2lbs : function (qty) {
    return qty / 0.453592;
  },

  // specific gravity to degrees Plato
  // source: https://www.brewersfriend.com/plato-to-sg-conversion-chart/
  // example: 1.050 SG >> 12.4˚P
  sg2p : function (sg) {
    //return -205.347*sg*sg + 668.72*sg - 463.37;
    return -616.868 + 1111.14*sg - 630.272*sg*sg + 135.997*sg*sg*sg;
  },

  // degrees Plato to specific gravity
  // source: https://www.brewersfriend.com/plato-to-sg-conversion-chart/
  // example: 15˚P >> 1.061 SG
  p2sg : function (p) {
    return 1 + p / (258.6 - p/258.2*227.1);
  },

  // transform Brix values of non fermented wort, given the refractometer's correction factor
  // source: https://byo.com/malt/item/1313-refractometers
  obrix2sg : function (obrix, correction) {
    var brix = obrix / correction;
    return 1.000019 + 0.003865613*brix + 0.00001296425*brix*brix + 0.00000005701128*brix*brix*brix;  // CHECK POWERS!!!
  },

  // transform Brix values of fermenting/fermented wort
  // source: http://digitaleditions.walsworthprintgroup.com/publication/frame.php?i=415999&p=1&pn=&ver=html5
  fbrix2sg : function (fbrix, correction, obrix) {
    return 1 - 0.002349*obrix/correction + 0.006276*fbrix/correction;
  },

  // calculate ABW from Brix readings
  // source: http://digitaleditions.walsworthprintgroup.com/publication/frame.php?i=415999&p=1&pn=&ver=html5
  get_ABW : function (obrix, fbrix, correction) {
    return 0.67062*obrix / correction - 0.66091*fbrix/correction;
  },

  // calculate ABV from SG and ABW
  // source: http://digitaleditions.walsworthprintgroup.com/publication/frame.php?i=415999&p=1&pn=&ver=html5
  ABW2ABV : function (sg, abw) {
    return sg * abw / 0.791;
  }

};


// transformations to be checked and published
/*      'og': function() {
      this.obrix = ((143.254*this.og*this.og*this.og - 648.670*this.og*this.og + 1125.805*this.og - 620.389)* this.refractometer.correction).toFixed(1); // approximation to be checked
      this.oplato = homebrewlib.sg2p(this.og).toFixed(1);
    },
    'oplato': function() {
      this.og = homebrewlib.p2sg(this.oplato).toFixed(3);
      this.obrix = ((143.254*this.og*this.og*this.og - 648.670*this.og*this.og + 1125.805*this.og - 620.389)* this.refractometer.correction).toFixed(1); // approximation to be checked
    }, */
/*      'fg': function() {
      this.fbrix = ((this.fg - 1 + 0.002349*this.obrix/this.refractometer.correction) / 0.006276 * this.refractometer.correction).toFixed(1);
      this.fplato = homebrewlib.sg2p(this.fg).toFixed(1);
    },
    'fplato': function() {
      this.fg = homebrewlib.p2sg(this.fplato).toFixed(3);
      this.fbrix = ((this.fg - 1 + 0.002349*this.obrix/this.refractometer.correction) / 0.006276 * this.refractometer.correction).toFixed(1);
    }, */

},{}],4:[function(require,module,exports){
// contains constants needed in calculations
// The equipment settings describe the properties of the brew equipment.
// The proposed values refer to my own 50l brew equipment and are meant
// to be overwritten with custom values by the user

module.exports = {

  mash_max_volume : 50,
  mash_efficiency_weight : 0.751,
  mash_efficiency_potential : 0.91,
  mash_false_bottom_volume: 5,
  mash_loss : 0,

  sparge_max_volume : 50,

  boil_max_volume : 70,
  boil_evaporation_rate : 8.3,
  boil_loss : 2,

  whirlpool_loss : 0,

  fermentation_max_volume: 60,
  fermentation_loss: 1.5,

};

},{}],5:[function(require,module,exports){
// functions for flow management

// create generic, named flow
create = function (name) {
  return {
    type   : 'flow',
    name   : name,
    plan : { vol: 0, og: 1, fg: 1, abv: 0, ebc: 0, ibu: 0, co2: 0 },
    real : { vol: 0, og: 1, fg: 1, abv: 0, ebc: 0, ibu: 0, co2: 0 }
  };
};

// split flow into two: user-defined volume is moved to new recipe,
// the rest of the volume is kept in current recipe
split = function (inflow, params, outflow) {

  outflow.plan = JSON.parse(JSON.stringify(inflow.plan)); // copy inflow to outflow by value

  if (!params.source_split)
    outflow.plan.vol = outflow.plan.vol - params.vol; // source recipe
  else
    outflow.plan.vol = params.source_split.params.vol; // target recipe
}

// merges two flows: calculates merged properties only for target recipe
merge = function (inflow, params, outflow) {

  if (params.source_flow) {
    var wort = inflow.plan;
    var merge_wort = params.source_flow.plan;

    outflow.plan = {
      vol : wort.vol + merge_wort.vol,
      og  : (wort.og * wort.vol + merge_wort.og * merge_wort.vol) / (wort.vol + merge_wort.vol),
      fg  : (wort.fg * wort.vol + merge_wort.fg * merge_wort.vol) / (wort.vol + merge_wort.vol),
      abv : (wort.abv * wort.vol + merge_wort.abv * merge_wort.vol) / (wort.vol + merge_wort.vol),
      ebc : (wort.ebc * wort.vol + merge_wort.ebc * merge_wort.vol) / (wort.vol + merge_wort.vol),
      ibu : (wort.ibu * wort.vol + merge_wort.ibu * merge_wort.vol) / (wort.vol + merge_wort.vol),
      co2 : (wort.co2 * wort.vol + merge_wort.co2 * merge_wort.vol) / (wort.vol + merge_wort.vol)
    };
  }
};



module.exports = {
  create : create,
  split  : split,
  merge  : merge,
};

},{}],6:[function(require,module,exports){
var constants=require("./constants.js");var conv=require("./conversions.js");var equipment=require("./equipment.js");var brew=require("./brew.js");var flow=require("./flow.js");function Recipe(){this.equipment={};this.process=[];this.process[0]=flow.create("Mash water");this.set_equipment=function(equipment){this.equipment=JSON.parse(JSON.stringify(equipment));for(i=0;i<this.process.length;i++)if(this.process[i].type=="activity")if(this.process[i].name=="Mash"){this.process[i].params.mash_efficiency_weight=equipment.mash_efficiency_weight;this.process[i].params.mash_loss=equipment.mash_loss}else if(this.process[i].name=="Boil"){this.process[i].params.boil_evaporation_rate=equipment.boil_evaporation_rate;this.process[i].params.boil_loss=equipment.boil_loss;this.process[i].params.whirlpool_loss=equipment.whirlpool_loss}else if(this.process[i].name=="Ferment"){this.process[i].params.fermentation_loss=equipment.fermentation_loss}else if(this.process[i].name=="Bottle"){}};this.add_mash=function(position){if(typeof position==="undefined")position=this.process.length;else if(position<-1||position>=this.process.length){console.log("Illegal position for current model.");return}var efficiency_weight=0;var loss=0;if(this.equipment.mash_efficiency_weight)efficiency_weight=this.equipment.mash_efficiency_weight;if(this.equipment.mash_loss)loss=this.equipment.mash_loss;this.process.splice(position,0,{type:"activity",name:"Mash",run:brew.mash,params:{mash_efficiency_weight:efficiency_weight,malts:[],mash_water:0,sparge_water:0,mash_loss:loss}},flow.create("Post-mash wort"));return this};this.add_boil=function(position){if(typeof position==="undefined")position=this.process.length;else if(position<-1||position>=this.process.length){console.log("Illegal position for current model.");return}var evaporation_rate=0;var boil_loss=0;var whirlpool_loss=0;if(this.equipment.boil_evaporation_rate)evaporation_rate=this.equipment.boil_evaporation_rate;if(this.equipment.boil_loss)boil_loss=this.equipment.boil_loss;if(this.equipment.whirlpool_loss)whirlpool_loss=this.equipment.whirlpool_loss;this.process.splice(position,0,{type:"activity",name:"Boil",run:brew.boil,params:{time:0,whirlpool:0,hops:[],water_addition:0,sugar_addition:{qty:0,type:"Sucrose"},boil_evaporation_rate:evaporation_rate,boil_loss:boil_loss,whirlpool_loss:whirlpool_loss}},flow.create("Post-boil wort"));return this};this.add_ferment=function(position){if(typeof position==="undefined")position=this.process.length;else if(position<-1||position>=this.process.length){console.log("Illegal position for current model.");return}var loss=0;if(this.equipment.fermentation_loss)loss=this.equipment.fermentation_loss;this.process.splice(position,0,{type:"activity",name:"Ferment",run:brew.ferment,params:{temperature:0,yeast:{name:"WYeast London ESB",type:"liquid",attenuation:83},water_addition:0,sugar_addition:{qty:0,type:"Sucrose"},hops:[],fermentation_loss:loss}},flow.create("Flat beer"));return this};this.add_bottle=function(position){if(typeof position==="undefined")position=this.process.length;else if(position<-1||position>=this.process.length){console.log("Illegal position for current model.");return}this.process.splice(position,0,{type:"activity",name:"Bottle",run:brew.bottle,params:{prime:[]}},flow.create("Carbonated beer"));return this};this.add_split=function(position,target_recipe){if(!target_recipe){console.log("No target recipe specified.");return}if(typeof position==="undefined"||position<0||position>=this.process.length){console.log("Illegal position of split in source recipe.");return}if(this.process[position].type!="flow"){console.log("Source node to be split is not a flow node.");return}this.process.splice(position+1,0,{type:"activity",name:"Split",run:flow.split,params:{target_recipe:target_recipe,vol:0}},flow.create("Split flow"));target_recipe.equipment=this.equipment;for(var i=0;i<=position;i++)target_recipe.process[i]=this.process[i];target_recipe.process.splice(position+1,0,{type:"activity",name:"Split",run:flow.split,params:{source_split:this.process[position+1]}},flow.create("Start flow"));return this};this.add_merge=function(source_position,target_recipe,target_position){if(!target_recipe){console.log("No target recipe specified.");return}if(typeof source_position==="undefined"||source_position<0||source_position>=this.process.length){console.log("Illegal position of merge in source recipe.");return}if(typeof target_position==="undefined"||target_position<0||target_position>=target_recipe.process.length){console.log("Illegal position of merge in target recipe.");return}if(this.process[source_position].type!="flow"){console.log("Source node to be merged is not a flow node.");return}if(target_recipe.process[target_position].type!="flow"){console.log("Target node to be merged is not a flow node.");return}this.process.splice(source_position+1,0,{type:"activity",name:"Merge",run:flow.merge,params:{source_flow:null}},flow.create("Empty flow"));target_recipe.process.splice(target_position+1,0,{type:"activity",name:"Merge",run:flow.merge,params:{source_flow:this.process[source_position]}},flow.create("Merged flow"));return this};this.reset=function(){this.process=[];this.process[0]=flow.create("Mash water")};this.delete=function(position){if(typeof position==="undefined"||position<0||position>=this.process.length){console.log("Illegal position for current recipe.");return}if(this.process[position].type!="activity"){console.log("Position must point an activity node.");return}this.process.splice(position,2)};this.brew=function(){for(var i=0;i<this.process.length;i++)if(this.process[i].name=="Split"&&this.process[i].params.target_recipe)this.process[i].params.target_recipe.brew();for(var i=0;i<this.process.length;i++)if(this.process[i].type=="activity")this.process[i].run(this.process[i-1],this.process[i].params,this.process[i+1])}}module.exports={conversion:conv,constants:constants,equipment:equipment,newRecipe:function(){return new Recipe}};
},{"./brew.js":1,"./constants.js":2,"./conversions.js":3,"./equipment.js":4,"./flow.js":5}]},{},[6])(6)
});